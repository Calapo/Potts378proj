{
  "hash": "5ba646bb39f6de6235a7c32d475c4df7",
  "result": {
    "markdown": "---\ntitle: \"Model\"\nauthor: \"Carter Potts\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"pins\")\nlibrary(pins)\n#install.packages(\"vetiver\")\nlibrary(vetiver)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport vetiver\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\npy_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npython:         C:/Users/C25Carter.Potts/OneDrive - afacademy.af.edu/Documents/378_FinalProject/.venv/Scripts/python.exe\nlibpython:      C:/Program Files/Python39/python39.dll\npythonhome:     C:/Users/C25Carter.Potts/OneDrive - afacademy.af.edu/Documents/378_FinalProject/.venv\nversion:        3.9.5 (tags/v3.9.5:0a7dcbd, May  3 2021, 17:27:52) [MSC v.1928 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:          C:/Users/C25Carter.Potts/OneDrive - afacademy.af.edu/Documents/378_FinalProject/.venv/Lib/site-packages/numpy\nnumpy_version:  1.26.4\n\nNOTE: Python version was forced by VIRTUAL_ENV\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pins import board_folder\nimport pins\nfrom vetiver import vetiver_pin_write\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverModel\nfrom vetiver import VetiverAPI\n```\n:::\n\n\n## Get Data\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n```\n:::\n:::\n\n\n## Define Model and Fit\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Intercept {model.intercept_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIntercept 2169.269720939398\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Columns {X.columns}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n \n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\npath = 'C:/Users/C25Carter.Potts/OneDrive - afacademy.af.edu/Documents/378_FinalProject/data/model/'\nos.makedirs(path, exist_ok=True)\n```\n:::\n\n\nHere we send it to a pin board that allows us to access the model later.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Create a board that allows pickled models\nboard = pins.board_folder(\"C:/Users/C25Carter.Potts/OneDrive - afacademy.af.edu/Documents/378_FinalProject/data/model\", allow_pickle_read=True)\n# Assuming 'v' is your VetiverModel object\n# Pin the model to the board\nvetiver.vetiver_pin_write(board, v, 'penguin_model')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Create a board that allows pickled models\nboard = pins.board_folder('data/model', allow_pickle_read=True)\nprint(board)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\n\n# GitHub Personal Access Token\ngithub_token = \"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\"\n\n# Your GitHub username\ngithub_username = \"Calapo\"\n\n# Repository name\nrepo_name = \"Potts378proj\"\n\n# Request URL for creating a new repository\ncreate_repo_url = \"https://api.github.com/user/repos\"\n\n# Request headers with authorization token\nheaders = {\n    \"Authorization\": f\"token {github_token}\",\n    \"Content-Type\": \"application/json\",\n}\n\n# Payload for creating the repository\ncreate_payload = {\n    \"name\": repo_name,\n    \"description\": \"An empty public repository\",\n    \"private\": False,  # Public repository\n}\n\n# Create the repository\nresponse = requests.post(create_repo_url, json=create_payload, headers=headers)\n\n# Check if the repository was created successfully\nif response.status_code == 201:\n    print(f\"Repository '{repo_name}' created successfully.\")\n\n    # URL for updating repository settings to set the default branch\n    set_default_branch_url = f\"https://api.github.com/repos/{github_username}/{repo_name}\"\n\n    # Payload to set the default branch\n    default_branch_payload = {\n        \"default_branch\": \"master\",  # Set your desired default branch name\n    }\n\n    # PATCH request to update the repository and set the default branch\n    response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)\n\n    # Check if the default branch was set successfully\n    if response.status_code == 200:\n        print(\"Default branch set successfully.\")\n    else:\n        print(\"Failed to set default branch.\")\n        print(\"Status code:\", response.status_code)\n        print(\"Response:\", response.json())\nelse:\n    print(\"Failed to create repository.\")\n    print(\"Status code:\", response.status_code)\n    print(\"Response:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFailed to create repository.\nStatus code: 401\nResponse: {'message': 'Bad credentials', 'documentation_url': 'https://docs.github.com/rest'}\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
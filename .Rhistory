reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
quit
#| message: false
#| warning: false
library(ISLR2)
library(boot)
library(tidyverse)
library(tidymodels)
temp_betas <- seq(-5, 5, 0.1)
plot(temp_betas, (2 - temp_betas)^2 + 3*(temp_betas)^2, type = "l")
# find the minimimum of the function
temp_betas[which.min((2 - temp_betas)^2 + 3*(temp_betas)^2)]
# calculate (6.14)
2 / (1 + 3)
temp_betas <- seq(-5, 5, 0.01)
plot(temp_betas, (2 - temp_betas)^2 + 3*abs(temp_betas), type = "l")
# find the minimum of the function
temp_betas[which.min((2 - temp_betas)^2 + 3*abs(temp_betas))]
# calculate (6.15)
2 - 3 / 2
temp_betas <- seq(-5, 5, 0.01)
plot(temp_betas, (1 - temp_betas)^2 + 3*abs(temp_betas), type = "l")
# find the minimum
temp_betas[which.min((1 - temp_betas)^2 + 3*abs(temp_betas))]
temp_betas <- seq(-5, 5, 0.01)
plot(temp_betas, (-2 - temp_betas)^2 + 3*abs(temp_betas), type = "l")
# find the minimum
temp_betas[which.min((-2-temp_betas)^2 + 3*abs(temp_betas))]
# calculate (6.15)
-2 + 3/2
summary(Default)
set.seed(1127)
Default_split <- initial_split(Default, strata = "default")
Default_train <- training(Default_split)
Default_test <- testing(Default_split)
lasso_spec <- logistic_reg(penalty = 0, mixture = 1) %>%
set_mode("classification") %>%
set_engine("glmnet")
lasso_fit_basic <- lasso_spec %>%
fit(default ~ ., data = Default_train)
install,packages(vetiver)
install.packages(vetiver)
from vetiver import VetiverModel
reticulate::repl_python()
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
/data/model
from vetiver import VetiverModel
v = VetiverModel(/data/model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(data/model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(/data/model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model
dump(v.model, model_path)
from vetiver import VetiverModel import dump import joblib
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model.joblib
dump(v.model, model_path)
from vetiver import VetiverModel import dump import joblib
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model"
dump(v.model, model_path)
from vetiver import VetiverModel
import dump
import joblib
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model"
dump(v.model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model"
dump(v.model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model.joblib"
dump(v.model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\penguin_model.joblib"
dump(model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model\"
dump(model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
dump(model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
dump(model, model_path)
vetiver_pin_write(v, 'penguin_model_pin')
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
dump(model, model_path)
from vetiver import VetiverModel
from joblib import dump
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
dump(model, model_path)
from joblib import dump
import os
# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
model_filename = "penguin_model.joblib"  # Define a filename for the model
# Ensure the directory exists
if not os.path.exists(model_path):
os.makedirs(model_path)
# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)
# Save the model
dump(model, full_model_path)
from joblib import dump
import os
# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Desktop\378_FinalProject\data\model"
model_filename = "penguin_model"  # Define a filename for the model
# Ensure the directory exists
if not os.path.exists(model_path):
os.makedirs(model_path)
# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)
# Save the model
dump(model, full_model_path)
from joblib import dump
import os
# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Documents\378_FinalProject\data\model"
model_filename = "penguin_model"  # Define a filename for the model
# Ensure the directory exists
if not os.path.exists(model_path):
os.makedirs(model_path)
# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)
# Save the model
dump(model, full_model_path)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
reticulate::repl_python()
from pins import board_folder
from vetiver import vetiver_pin_write
from vetiver import VetiverModel
from vetiver import VetiverAPI
quit
install.packages("pins")
library(pins)
install.packages("vetiver")
library(vetiver)
library(reticulate)
py_config()
reticulate::repl_python()
install_python("fastapi")
install_python("uvicorn")
from pins import board_folder
from vetiver import vetiver_pin_write
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
import os
# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Documents\378_FinalProject\data\model"
model_filename = "penguin_model"  # Define a filename for the model
# Ensure the directory exists
if not os.path.exists(model_path):
os.makedirs(model_path)
# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)
# Save the model
dump(model, full_model_path)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
from pins import board_folder
import pins
from vetiver import vetiver_pin_write
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
import os
import pins
# Ensure the directory exists
board_path = 'data/model'
if not os.path.exists(board_path):
os.makedirs(board_path)
import os
import pins
# Ensure the directory exists
board_path = 'data/model'
if not os.path.exists(board_path):
os.makedirs(board_path)
else:
print(1)
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
print(board)
# Delete existing pin if necessary
if board.pin_exists('penguin_model'):
board.pin_delete('penguin_model')
# Recreate the VetiverModel and pin it to the board
vetiver_pin_write(board, v, 'penguin_model')
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Delete existing pin if necessary
if board.pin_exists('penguin_model'):
board.pin_delete('penguin_model')
# Recreate the VetiverModel and pin it to the board
vetiver_pin_write(board, v, 'penguin_model')
quit
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
con = duckdb.connect('my-db.duckdb')
reticulate::repl_python()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
quit
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
reticulate::repl_python()
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
install.packages("pins")
library(pins)
install.packages("vetiver")
library(vetiver)
library(reticulate)
py_config()
reticulate::repl_python()
from pins import board_folder
import pins
from vetiver import vetiver_pin_write
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```y
```{python}
from vetiver import VetiverModel
from vetiver import VetiverAPI
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
import os
# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Documents\378_FinalProject\data\model"
model_filename = "penguin_model"  # Define a filename for the model
# Ensure the directory exists
if not os.path.exists(model_path):
os.makedirs(model_path)
# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)
# Save the model
dump(model, full_model_path)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
import os
import pins
# Ensure the directory exists
board_path = 'data/model'
if not os.path.exists(board_path):
os.makedirs(board_path)
else:
print(1)
# Delete existing pin if necessary
if board.pin_exists('penguin_model'):
board.pin_delete('penguin_model')
# Recreate the VetiverModel and pin it to the board
vetiver_pin_write(board, v, 'penguin_model')
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
quit
install.packages("pins")

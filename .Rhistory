# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver_pin_write(board, v, 'penguin_model')
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver.vetiver_pin_write(board, v, 'penguin_model')
import vetiver
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
# Load a simple dataset and train a model
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = iris.target
rf = RandomForestClassifier()
rf.fit(X, y)
# Create a Vetiver model object
v = vetiver.VetiverModel(rf, model_name="iris_model")
print(v)  # If you get a valid output, vetiver is working
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver.vetiver_pin_write(board, v, 'penguin_model')
import vetiver
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver.vetiver_pin_write(board, v, 'penguin_model')
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver.vetiver_pin_write(board, v, 'penguin_model')
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Assuming 'v' is your VetiverModel object
# Pin the model to the board
vetiver.vetiver_pin_write(board, v, 'penguin_model')
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
print(board)
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "master",  # Set your desired default branch name
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
if response.status_code == 200:
print(f"Default branch set successfully to 'master'.")
else:
print("Failed to set default branch.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "main",  # Set your desired default branch name
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
if response.status_code == 200:
print(f"Default branch set successfully to 'main'.")
else:
print("Failed to set default branch.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "main",  # Set your desired default branch name
}
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
if response.status_code == 200:
print(f"Default branch set successfully to 'main'.")
else:
print("Failed to set default branch.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Create the request URL
url = f"https://api.github.com/user/repos"
# Set the request headers
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Set the request payload
payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Set to False to create a public repo
}
# Make the POST request
response = requests.post(url, json=payload, headers=headers)
# Check if the request was successful
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "main",  # Set your desired default branch name
}
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
if response.status_code == 200:
print(f"Default branch set successfully to 'main'.")
else:
print("Failed to set default branch.")
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "main",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully to 'main'.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "main",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully to 'main'.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "development_branch",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "development_branch",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "master",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())
import requests
# GitHub Personal Access Token
github_token = "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"
# Your GitHub username
github_username = "Calapo"
# Repository name
repo_name = "Potts378proj"
# Request URL for creating a new repository
create_repo_url = "https://api.github.com/user/repos"
# Request headers with authorization token
headers = {
"Authorization": f"token {github_token}",
"Content-Type": "application/json",
}
# Payload for creating the repository
create_payload = {
"name": repo_name,
"description": "An empty public repository",
"private": False,  # Public repository
}
# Create the repository
response = requests.post(create_repo_url, json=create_payload, headers=headers)
# Check if the repository was created successfully
if response.status_code == 201:
print(f"Repository '{repo_name}' created successfully.")
# URL for updating repository settings to set the default branch
set_default_branch_url = f"https://api.github.com/repos/{github_username}/{repo_name}"
# Payload to set the default branch
default_branch_payload = {
"default_branch": "master",  # Set your desired default branch name
}
# PATCH request to update the repository and set the default branch
response = requests.patch(set_default_branch_url, json=default_branch_payload, headers=headers)
# Check if the default branch was set successfully
if response.status_code == 200:
print("Default branch set successfully.")
else:
print("Failed to set default branch.")
print("Status code:", response.status_code)
print("Response:", response.json())
else:
print("Failed to create repository.")
print("Status code:", response.status_code)
print("Response:", response.json())

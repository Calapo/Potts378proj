---
title: "Model"
author: "Carter Potts"
format:
  html:
    code-fold: true
---

```{r .cell-code}
install.packages("pins")
library(pins)
install.packages("vetiver")
library(vetiver)
```
```{r .cell-code}
library(reticulate)

py_config()
```
```{python .cell-code}

```




```{python .cell-code}
from pins import board_folder
import pins
from vetiver import vetiver_pin_write
```


```{python .cell-code}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```y
```{python}
from vetiver import VetiverModel
from vetiver import VetiverAPI
```

## Get Data


```{python .cell-code}
df = penguins.load_penguins().dropna()

df.head(3)
```

## Define Model and Fit


```{python .cell-code}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information


```{python .cell-code}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```
```{python .cell-code}
from joblib import dump
import os

# Define the model path and filename
model_path = r"C:\Users\C25Carter.Potts\OneDrive - afacademy.af.edu\Documents\378_FinalProject\data\model"
model_filename = "penguin_model"  # Define a filename for the model

# Ensure the directory exists
if not os.path.exists(model_path):
    os.makedirs(model_path)

# Combine path and filename for the full model path
full_model_path = os.path.join(model_path, model_filename)

# Save the model
dump(model, full_model_path)

```
```{python}
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
 
```
 
Here we send it to a pin board that allows us to access the model later.

```{python}
import os
import pins

# Ensure the directory exists
board_path = 'data/model'
if not os.path.exists(board_path):
    os.makedirs(board_path)
    else: 
      print(1)
```

 
```{python, eval=FALSE}
 
# Create a board that allows pickled models
board = pins.board_folder('data/model', allow_pickle_read=True)
print(board)
```

```{python} 
# Delete existing pin if necessary
if board.pin_exists('penguin_model'):
    board.pin_delete('penguin_model')

# Recreate the VetiverModel and pin it to the board
vetiver_pin_write(board, v, 'penguin_model')


```

```{python}
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
```

